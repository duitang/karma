

dependencies {

    compile("io.netty:netty-all:4.0.24.Final")
    compile("cglib:cglib:3.1") { exclude group: 'org.ow2.asm', module: 'asm' }
    compile("org.ow2.asm:asm:5.0.3")
    compile("org.apache.commons:commons-pool2:2.2")
    compile("org.apache.commons:commons-lang3:3.3.2")
    compile("com.fasterxml.jackson.core:jackson-databind:2.4.4")
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile("com.google.guava:guava:16.0.1")
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    
//    compile("org.slf4j:slf4j-log4j12:1.7.7")
    testCompile("junit:junit:4.11")
    testCompile("log4j:log4j:1.2.17")
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
}

sourceSets {
   main {
     //if you truly want to override the defaults:
     output.resourcesDir = 'build/classes/main'
   }
   test {
     //if you truly want to override the defaults:
     output.resourcesDir = 'build/classes/test'
   }
}

test {
  ignoreFailures true
}

group 'com.github.laurencecao'
version '1.0'

apply plugin: 'java'
apply plugin: 'maven-publish'

ext {
	// the password needs to be specified via command line with -P
	snapshotRepoPass = project.hasProperty('snapshotRepoPass') ? project.getProperty('snapshotRepoPass') : ''
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourceJar
			artifact javadocJar

			pom.withXml {
				asNode().with {
					appendNode('packaging', 'jar')
					appendNode('name', 'PROJECT_NAME')
					appendNode('description', 'PROJECT_DESCRIPTION')
					appendNode('url', 'PROJECT_URL')
					appendNode('scm').with {
						appendNode('url', 'SCM_URL_FOR_PEOPLE')
						appendNode('connection', 'SCM_URL_FOR_SCM')
					}
					appendNode('issueManagement').with {
						appendNode('url', 'ISSUE_TRACKER_URL')
						appendNode('system', 'ISSUE_TRACKER_NAME')
					}
					appendNode('licenses').with {
						appendNode('license').with {
							appendNode('name', 'LICENSE_NAME')
							appendNode('url', 'LICENSE_URL')
						}
					}
					appendNode('organization').with {
						appendNode('name', 'ORG_NAME')
						appendNode('url', 'ORG_URL')
					}
					appendNode('developers').with {
						appendNode('developer').with {
							appendNode('id', 'DEV_HANDLE')
							appendNode('name', 'DEV_NAME')
							appendNode('email', 'DEV_MAIL')
							appendNode('organization', 'ORG_NAME_AGAIN')
							appendNode('organizationUrl', 'ORG_URL_AGAIN')
							appendNode('timezone', 'UTC_OFFSET')
						}
					}
				}
			}

			tasks.withType(Jar) {
				from(project.projectDir) {
					include 'LICENSE.md'
					into 'META-INF'
				}
			}
		}
	}
	repositories {
		maven {
			// url 'https://oss.sonatype.org/content/repositories/snapshots/'
			url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
			credentials {
				username "laurencecao"
				password project.snapshotRepoPass
			}
		}
	}
}

task sourceJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

