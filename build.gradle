
task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

buildscript {
    repositories {
      maven {
        url "https://plugins.gradle.org/m2/"
      }
    }
    dependencies {
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }
}  

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'    
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    task findbugs(
        group: "Verification", 
        description: "Marker task to enabled findbugs."
    )

    jacoco {
        toolVersion = '0.7.7+'
    }
        
    repositories {
        mavenLocal()
        jcenter()
    }
}

subprojects {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    configurations {
    
        providedCompile
        all*.exclude group: 'javax.jms', module: 'jms'
        all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
        all*.exclude group: 'com.sun.jmx', module: 'jmxri'
        published
    
    }
    
    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    
    version =  '1.0'
    group = 'com.github.laurencecao'
    
    sourceSets {
       main {
         //if you truly want to override the defaults:
         output.resourcesDir = 'build/classes/main'
       }
       test {
         //if you truly want to override the defaults:
         output.resourcesDir = 'build/classes/test'
       }
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
    }
    
    version =  '1.0'
    group = 'com.github.laurencecao'
    
    task pom << {
        pom {
            project {
                inceptionYear '2016'
                properties {
         			  project {
                			build {
                    			sourceEncoding 'UTF-8'
                			}
            		  }
            		  maven {
                			compiler {
                    			source '1.7'
                    			target '1.7'
                			}
            		  }
        		}
            }
        }.writeTo("pom.xml")
    }
    
    eclipse {
        classpath {
           downloadSources=true
           downloadJavadoc=true
           defaultOutputDir = file('build/classes/main/')
           file.withXml { n ->
                n.asNode().classpathentry.findAll { it.@path.startsWith('src/test') }
                        .each { it.@output = 'build/classes/test' }
           }           
        }
    }
    
    test {
        ignoreFailures = true
        testLogging {
            showStandardStreams = true
        }
        jacoco {
            excludes += ['**.demo.**']
        }
    }
    


    
    findbugsMain {
      reports {
        xml.enabled = false
        html.enabled = true
      }
    }
    
    findbugs { 
        // your findbugs configuration.
        ignoreFailures = true 
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.findbugsMain.onlyIf { 
            taskGraph.hasTask((tasks.findbugs))
        }
        tasks.findbugsTest.onlyIf {  
               taskGraph.hasTask((tasks.findbugs)) 
        }
    }

}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/demo/**'])
        })
    }
}

group 'com.github.laurencecao'
version '1.0'

apply plugin: 'java'
apply plugin: 'maven-publish'

ext {
	// the password needs to be specified via command line with -P
	snapshotRepoPass = project.hasProperty('snapshotRepoPass') ? project.getProperty('snapshotRepoPass') : ''
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourceJar
			artifact javadocJar

			pom.withXml {
				asNode().with {
					appendNode('packaging', 'jar')
					appendNode('name', 'PROJECT_NAME')
					appendNode('description', 'PROJECT_DESCRIPTION')
					appendNode('url', 'PROJECT_URL')
					appendNode('scm').with {
						appendNode('url', 'SCM_URL_FOR_PEOPLE')
						appendNode('connection', 'SCM_URL_FOR_SCM')
					}
					appendNode('issueManagement').with {
						appendNode('url', 'ISSUE_TRACKER_URL')
						appendNode('system', 'ISSUE_TRACKER_NAME')
					}
					appendNode('licenses').with {
						appendNode('license').with {
							appendNode('name', 'LICENSE_NAME')
							appendNode('url', 'LICENSE_URL')
						}
					}
					appendNode('organization').with {
						appendNode('name', 'ORG_NAME')
						appendNode('url', 'ORG_URL')
					}
					appendNode('developers').with {
						appendNode('developer').with {
							appendNode('id', 'DEV_HANDLE')
							appendNode('name', 'DEV_NAME')
							appendNode('email', 'DEV_MAIL')
							appendNode('organization', 'ORG_NAME_AGAIN')
							appendNode('organizationUrl', 'ORG_URL_AGAIN')
							appendNode('timezone', 'UTC_OFFSET')
						}
					}
				}
			}

			tasks.withType(Jar) {
				from(project.projectDir) {
					include 'LICENSE.md'
					into 'META-INF'
				}
			}
		}
	}
	repositories {
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
			credentials {
				username "laurencecao"
				password project.snapshotRepoPass
			}
		}
	}
}

task sourceJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
